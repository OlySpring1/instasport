{"version":3,"sources":["components/Header/Header.tsx","components/Ad/Ad.tsx","store/loading.ts","store/message.ts","store/loadedComleted.ts","store/clubs.ts","store/city.ts","store/index.ts","helpers/api.ts","components/CityList/CityList.tsx","components/ActivityList/ActivityList.tsx","components/CartClub/CartClub.tsx","components/ClubList/ClubList.tsx","components/ClubsPage/ClubsPage.tsx","components/Loading/Loading.tsx","App.tsx","index.tsx"],"names":["navList","title","link","Header","className","href","target","rel","map","item","key","to","activeClassName","Ad","reducer","loading","action","type","message","isLoaded","clubs","initState","localStorage","getItem","JSON","parse","selectCity","rootReducer","combineReducers","cityReduser","loadingReducer","loaded","isLoadReducer","messageReducer","getLoading","state","getMessage","getLoaded","getClubs","getCity","loadData","dispatch","fetch","then","response","json","clubsFromServer","catch","setMessage","getClubsInCity","createSelector","filter","club","city","slug","store","createStore","composeWithDevTools","applyMiddleware","thunk","CityList","useSelector","useDispatch","objForComparison","cities","useMemo","uniqCity","onClick","Fragment","exact","ActivityList","selectActivity","resetActivity","visibleClubsInCity","activities","activity","uniqActivities","Array","from","Set","reduce","acm","data-hover","CartClub","errorLogo","test","logo","src","alt","title_short","ClubList","visibleClubs","TransitionGroup","CSSTransition","timeout","classNames","ClubsPage","useState","setVisibleClubs","useEffect","find","Loading","errorMessage","App","isLoading","setItem","stringify","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72c98302.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.scss';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst navList = [\r\n  {\r\n    title: 'Клубы',\r\n    link: '/club',\r\n  },\r\n  {\r\n    title: 'Анонсы',\r\n    link: '/announce',\r\n  },\r\n  {\r\n    title: 'Блог',\r\n    link: '/blog',\r\n  },\r\n];\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header \">\r\n      <div className=\"header__container container\">\r\n        <a\r\n          href=\"https://instasport.co/landing/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"header__logo logo\">\r\n          Instasport\r\n    </a>\r\n        <nav>\r\n          <ul className=\"nav__list\">\r\n            {navList.map(item => (\r\n              <li key={item.title} className=\"nav__item\">\r\n                <NavLink\r\n                  to={item.link}\r\n                  className=\"nav__link\"\r\n                  activeClassName=\"nav__link--active\"\r\n                >\r\n                  {item.title}\r\n                </NavLink>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\nexport default Header;","import React from 'react';\r\nimport './Ad.scss';\r\n\r\nconst Ad = () => (\r\n  <div className=\"container\">\r\n    <blockquote className=\"blockquote text-right\">\r\n      <p className=\"blockquote__text-right\">\r\n        Для записи на тренировку теперь достаточно пару касаний!\r\n      </p>\r\n      <footer >\r\n        <cite title=\"Source Title\" className=\"blockquote__footer\">\r\n          - Instasport\r\n      </cite>\r\n      </footer>\r\n    </blockquote>\r\n    <div className=\"box\">\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <span></span>\r\n      <div className=\"ads\">\r\n        <h1 className=\"ads__title\" >\r\n          Выбери свой клуб\r\n      </h1>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\nexport default Ad;","import { Action } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\ntype startLoading = Action<typeof START_LOADING>;\ntype finishLoading = Action<typeof FINISH_LOADING>;\ntype AllowedActions = startLoading | finishLoading;\n\n\nconst reducer = (loading = false, action: AllowedActions) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\nconst SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\ntype setClubs = Action<typeof SET_MESSAGE> & {\n  message: string;\n};\n\ntype AllowedActions = setClubs;\n\nconst reducer = (message = '', action: AllowedActions) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\nconst LOAD_COMPLETED = 'LOAD_COMPLETED';\n\nexport const setIsLoaded = () => ({ type: LOAD_COMPLETED });\n\ntype setIsLoaded = Action<typeof LOAD_COMPLETED>;\n\ntype AllowedActions = setIsLoaded;\n\nconst reducer = (isLoaded = false, action: AllowedActions) => {\n  switch (action.type) {\n    case LOAD_COMPLETED:\n      return true;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\r\n\r\nconst SET_CLUB = 'SET_CLUB';\r\n\r\nexport const setClubs = (clubs: SportClub[]) => (\r\n  {\r\n    type: SET_CLUB,\r\n    clubs,\r\n  }\r\n);\r\n\r\ntype setClubs = Action<typeof SET_CLUB> & {\r\n  clubs: SportClub[];\r\n};\r\n\r\ntype AllowedActions = setClubs;\r\n\r\nconst reducer = (clubs: SportClub[] = [], action: AllowedActions) => {\r\n  switch (action.type) {\r\n    case SET_CLUB:\r\n      return action.clubs;\r\n    default:\r\n      return clubs;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import { Action } from 'redux';\r\n\r\nconst SET_SELECT_CITY = 'SET_SELECT_CITY';\r\nconst RESET_CITY = 'RESET_CITY';\r\n\r\nexport const setSelectCity = (selectCity: string) => (\r\n  {\r\n    type: SET_SELECT_CITY,\r\n    selectCity,\r\n  }\r\n);\r\n\r\nexport const setRsetCity = () => (\r\n  {\r\n    type: RESET_CITY,\r\n  }\r\n);\r\n\r\ntype setSelectCity = Action<typeof SET_SELECT_CITY> & {\r\n  selectCity: string;\r\n}\r\n\r\ntype setRsetCity = Action<typeof RESET_CITY>\r\n\r\ntype AllowedActions = setSelectCity | setRsetCity;\r\n\r\nlet initState: string = '';\r\n\r\nif (localStorage.getItem('selectCity')) {\r\n  initState = JSON.parse(localStorage.getItem('selectCity') || '');\r\n}\r\n\r\nconst reducer = (selectCity = initState, action: AllowedActions) => {\r\n  switch (action.type) {\r\n    case SET_SELECT_CITY:\r\n      return action.selectCity;\r\n    case RESET_CITY:\r\n      return '';\r\n    default:\r\n      return selectCity;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import {\r\n  createStore, combineReducers, applyMiddleware, Action,\r\n} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport { createSelector } from \"reselect\";\r\nimport { Dispatch } from 'react';\r\nimport loadingReducer, { finishLoading, startLoading } from './loading';\r\nimport messageReducer, { setMessage } from './message';\r\nimport isLoadReducer, { setIsLoaded } from './loadedComleted';\r\n\r\nimport {getData } from '../helpers/api';\r\nimport clubs, {setClubs} from './clubs';\r\nimport cityReduser from './city';\r\n\r\nconst rootReducer = combineReducers({\r\n  clubs,\r\n  selectCity: cityReduser,\r\n  loading: loadingReducer,\r\n  loaded: isLoadReducer,\r\n  message: messageReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport const getLoading = (state: RootState) => state.loading;\r\nexport const getMessage = (state: RootState) => state.message;\r\nexport const getLoaded = (state: RootState) => state.loaded;\r\nexport const getClubs = (state: RootState) => state.clubs;\r\nexport const getCity = (state: RootState) => state.selectCity;\r\n\r\nexport const loadData = () => {\r\n  return (dispatch: Dispatch<Action>) => {\r\n    dispatch(startLoading());\r\n\r\n    getData()\r\n      .then(clubsFromServer => {\r\n        dispatch(finishLoading());\r\n        dispatch(setClubs(clubsFromServer));\r\n        dispatch(setIsLoaded());\r\n      })\r\n      .catch(() => {\r\n        dispatch(setMessage('Oops! Something went wrong... :('));\r\n      });\r\n  };\r\n};\r\n\r\nexport const getClubsInCity = createSelector(\r\n  getClubs, \r\n  getCity,\r\n  \r\n  (clubs, selectCity) => {\r\n     return selectCity ?\r\n     clubs.filter((club: SportClub) => club.city.slug === selectCity)\r\n    : clubs\r\n}) \r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;\r\n\r\n","const API_URL = 'https://instasport.co/dashboard/api/v1/clubs/';\r\n\r\nexport const getData = () => {\r\n  return fetch(API_URL)\r\n    .then(response => response.json());\r\n};\r\n","import React, { useMemo } from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './CityList.scss';\r\nimport {\r\n  getClubs,\r\n} from '../../store/index';\r\nimport { setSelectCity, setRsetCity } from '../../store/city';\r\n\r\nconst CityList = () => {\r\n  const clubs = useSelector(getClubs);\r\n  const dispatch = useDispatch();\r\n  const objForComparison: objForComparison = {};\r\n\r\n  const cities = useMemo(() => (\r\n    clubs.map((club: SportClub) => club.city)\r\n  ), [clubs]);\r\n\r\n  const uniqCity = useMemo(() => {\r\n    return cities.filter((city) => {\r\n      return city.slug in objForComparison ?\r\n        0\r\n        : (objForComparison\r\n        [city.slug] = 1)\r\n    })\r\n  }, [cities, objForComparison])\r\n\r\n  return (\r\n    <section className=\"cities\">\r\n\r\n      <ul className=\"cityList\">\r\n        <Link\r\n          to=\"/city\"\r\n          className=\"refreshCity-btn\"\r\n          onClick={() => dispatch(setRsetCity())}\r\n        />\r\n        {uniqCity.map((city) => (\r\n          <React.Fragment key={city.slug}>\r\n            <NavLink\r\n              to={`/city/${city.slug}`}\r\n              exact\r\n              className=\"cityList__link\"\r\n              activeClassName='is-active'\r\n              onClick={() => dispatch(setSelectCity(city.slug))\r\n              }\r\n            >\r\n              {city.title}\r\n            </NavLink>\r\n          </React.Fragment>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CityList;","import React, { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './ActivityList.scss';\r\nimport {\r\n  getClubsInCity,\r\n} from '../../store/index';\r\n\r\ntype ActivityListProps = {\r\n  selectActivity: (activity: string) => void;\r\n  resetActivity: () => void;\r\n}\r\n\r\nconst ActivityList: React.FC<ActivityListProps> = ({ selectActivity, resetActivity }) => {\r\n  const visibleClubsInCity = useSelector(getClubsInCity);\r\n\r\n  const activities = useMemo(() => (\r\n    visibleClubsInCity.map((club: SportClub) => (\r\n      club.activity.map((item: Activity) => item.slug))\r\n    )\r\n  ), [visibleClubsInCity])\r\n\r\n  const uniqActivities = useMemo(() => (\r\n    Array.from(new Set(activities.reduce((acm, activity) => [...acm, ...activity], [])))\r\n  ), [activities])\r\n\r\n  return (\r\n    <section className=\"activities\">\r\n\r\n      <ul className=\"activityList\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"refresh-btn\"\r\n          onClick={() => resetActivity()}\r\n        >\r\n        </button>\r\n        {uniqActivities\r\n          .map((activity) => (\r\n            <li\r\n              className=\"activityList__item\"\r\n              key={activity}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                data-hover={activity}\r\n                className=\"activityList__btn\"\r\n                onClick={() =>\r\n                  selectActivity(activity)\r\n                }\r\n              >\r\n                {activity}\r\n              </button>\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\nexport default ActivityList;","import React, { useMemo } from 'react';\r\nimport './CartClub.scss';\r\n\r\ntype CartClub = {\r\n  club: SportClub,\r\n}\r\n\r\nconst CartClub: React.FC<CartClub> = ({ club }) => {\r\n  const errorLogo = useMemo(() => (\r\n    /.jpg|.svg|.png/g.test(club.logo)\r\n  ), [club.logo])\r\n\r\n  return (\r\n    <li\r\n      key={club.link}\r\n      className=\"clubList__item cartClub\"\r\n    >\r\n      <a\r\n        href={club.link}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"cartClub__link\"\r\n      >\r\n        {errorLogo ? (\r\n          <img\r\n            src={club.logo}\r\n            alt=\"logo club\"\r\n            className=\"cartClub__logo\"\r\n          />\r\n        )\r\n          : <div className=\"cartClub__logo logo-title\">\r\n            {club.title}\r\n          </div>\r\n        }\r\n      </a>\r\n      <p className=\"cartClub__title\">\r\n        {club.title_short}\r\n      </p>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default CartClub;","import React from 'react';\r\nimport {\r\n  CSSTransition,\r\n  TransitionGroup,\r\n} from 'react-transition-group';\r\nimport './ClubList.scss';\r\nimport Club from '../CartClub/CartClub';\r\n\r\ntype ClubListProps = {\r\n  visibleClubs: SportClub[];\r\n}\r\nconst ClubList: React.FC<ClubListProps> = ({ visibleClubs }) => {\r\n  return (\r\n    <TransitionGroup className=\"todo-list clubList\">\r\n      {visibleClubs.map((club) => (\r\n        <CSSTransition\r\n          key={club.link}\r\n          timeout={500}\r\n          classNames=\"club\"\r\n        >\r\n          <Club club={club} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  )\r\n}\r\n\r\nexport default ClubList;","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  getClubsInCity,\r\n} from '../../store/index';\r\nimport CityList from '../CityList/CityList';\r\nimport ActivityList from '../ActivityList/ActivityList';\r\nimport ClubList from '../ClubList/ClubList';\r\n\r\nconst ClubsPage = () => {\r\n  const visibleClubsInCity = useSelector(getClubsInCity);\r\n  const [visibleClubs, setVisibleClubs] = useState(visibleClubsInCity)\r\n\r\n  useEffect(() => (\r\n    setVisibleClubs(visibleClubsInCity)\r\n  ), [visibleClubsInCity]);\r\n\r\n  const getClubsWithSelectActivity = (selectActivity: string) => {\r\n    setVisibleClubs(visibleClubsInCity.filter(club => (\r\n      club.activity.find(activity => activity.slug === selectActivity)\r\n    )))\r\n  };\r\n\r\n  const resetActivity = () => {\r\n    setVisibleClubs(visibleClubsInCity);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <CityList />\r\n      <ActivityList\r\n        selectActivity={getClubsWithSelectActivity}\r\n        resetActivity={resetActivity}\r\n      />\r\n      <ClubList visibleClubs={visibleClubs} />\r\n    </div>\r\n  )\r\n}\r\nexport default ClubsPage;","import React from 'react';\nimport './Loading.css';\nimport { useSelector } from 'react-redux';\n\nimport {\n  getLoaded,\n  getMessage,\n} from '../../store/index';\n\nconst Loading = () => {\n  const isLoaded = useSelector(getLoaded);\n  const errorMessage = useSelector(getMessage);\n  return (\n    <div className={(isLoaded || errorMessage !== '') ? '' : 'lds-roller'}>\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  )\n};\n\nexport default Loading;\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport Header from './components/Header/Header';\nimport Ad from './components/Ad/Ad';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport ClubsPage from './components/ClubsPage/ClubsPage';\nimport {\n  loadData,\n  getCity,\n  getLoading,\n  getLoaded,\n} from './store/index';\nimport Loading from './components/Loading/Loading';\n\nconst App = () => {\n  const selectCity = useSelector(getCity);\n  const isLoaded = useSelector(getLoaded);\n  const isLoading = useSelector(getLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadData());\n  }, [dispatch]);\n\n  useEffect(() => {\n    localStorage.setItem('selectCity', JSON.stringify(selectCity));\n  }, [selectCity]);\n\n  return (\n    <div className=\"App\">\n      {isLoading && (\n        <div className=\"loading\">\n          <Loading />\n        </div>\n      )}\n      {isLoaded && (\n        <>\n          <Header />\n          <main>\n            <Ad />\n            <ClubsPage />\n          </main>\n        </>\n      )}\n      <Redirect exact from=\"/\" to=\"/club\" />\n    </div >\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}